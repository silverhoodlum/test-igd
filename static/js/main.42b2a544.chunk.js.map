{"version":3,"sources":["images/logo.svg","components/card-modal/card-modal.component.jsx","components/firebase/firebase.utils.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardModal","props","handleInput","e","target","value","name","limits","min","max","setState","invalid","state","calculatePrice","show","setShow","width","drop","totalPrice","this","price_per_metre_squared","toFixed","Button","className","onClick","handleModal","Modal","dialogClassName","onHide","Header","closeButton","Body","Container","Row","Col","lg","alt","src","images","main","description","sm","type","placeholder","onKeyUp","icon","faCheck","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","storage","Card","otherProps","minimumPrice","useState","imageUrl","setImageUrl","useEffect","ref","texture_name","getDownloadURL","then","url","error","console","log","CardList","blinds","map","index","otherprops","key","App","blindsSummary","collection","get","snapshot","newBlinds","forEach","doc","data","push","catch","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.42b2a544.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.53cc366d.svg\";","import React from 'react';\r\nimport { Modal, Button, Col, Row, Container } from 'react-bootstrap';\r\nimport '../card-modal/card-modal.styles.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass CardModal extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            show: false,\r\n            setShow: false,\r\n            invalid:{\r\n                width: false,\r\n                drop: false\r\n            },\r\n            width: null,\r\n            drop: null,\r\n            totalPrice: null\r\n        }\r\n    }\r\n\r\n    /* show/hide modal, also reset input when it closes */\r\n    handleModal(){\r\n        const initialState = { \r\n            show: false,\r\n            setShow: false,\r\n            invalid:{\r\n                width: false,\r\n                drop: false\r\n            },\r\n            width: null,\r\n            drop: null,\r\n            totalPrice: null\r\n        }\r\n        this.setState({\r\n            ...initialState,\r\n            show:!this.state.show})\r\n    }\r\n\r\n    /* calculate total price only if both inputs are within limits */\r\n    calculatePrice() {\r\n        if(!this.state.invalid.width && !this.state.invalid.drop){\r\n            this.setState({totalPrice: (this.state.drop*this.state.width*this.props.price_per_metre_squared/10000).toFixed(2)})\r\n        }\r\n    }\r\n    \r\n\r\n    /* calculate total price only if both inputs are within limits */\r\n    handleInput = e => {\r\n        const {value, name} = e.target;\r\n        /* if input is outside limits show warning */   \r\n        if (value < this.props.limits[name].min || value > this.props.limits[name].max) {\r\n            this.setState({\r\n                invalid:{\r\n                    ...this.state.invalid,\r\n                     [name]:true},\r\n                     [name]:value\r\n                    })\r\n        }else {\r\n        /* if input is correct calculate price */ \r\n            this.setState({\r\n                invalid:{\r\n                    ...this.state.invalid,\r\n                     [name]:false},\r\n                     [name]:value\r\n                    }, () => {this.calculatePrice()})\r\n            }\r\n        }\r\n\r\n    render(){\r\n        return (\r\n        <>\r\n            <Button className=\"btn-get-price\" onClick={() => {this.handleModal()}} > Get Price</Button>\r\n            {/* modal code template originally taken from react-bootstrap*/}\r\n                <Modal className=\"modal-container\" dialogClassName=\"modal-60w\" show={this.state.show} onHide={() => {this.handleModal()}}>\r\n                            <Modal.Header closeButton>\r\n                            </Modal.Header>\r\n                            <Modal.Body className=\"modal-body\" >\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"modal-img-col\" lg={6}>\r\n                                            <img alt=\"blind\" src={this.props.images.main} />\r\n                                        </Col>\r\n                                        <Col className=\"modal-text-col\" lg={6}>\r\n                                            <h2>{this.props.name}</h2>\r\n                                            <p>{this.props.description}</p>\r\n                                            <p className=\"font-weight-bold\">Enter measurements to get a price</p>\r\n                                            <Row>\r\n                                            <Col className=\"input-col\" sm={12} lg={6}>\r\n                                                <div className=\"input-wrap\">\r\n                                                    <input name=\"width\" className=\"modal-input\" type=\"number\" placeholder=\"Width(cm)\" onKeyUp={this.handleInput}/>\r\n                                                    {/* only show if input is within limits*/}\r\n                                                    { (!this.state.invalid.width && this.state.width) &&\r\n                                                    <FontAwesomeIcon icon={faCheck} />\r\n                                                        }\r\n                                                </div>\r\n                                                    {/* only show if input is outside limits*/}\r\n                                                { (this.state.invalid.width && this.state.width) &&\r\n                                                        <p className=\"warning\">\r\n                                                            Limits: {this.props.limits.width.min}cm - {this.props.limits.width.max}cm\r\n                                                        </p>\r\n                                                    }\r\n                                            </Col>\r\n                                            <Col className=\"input-col\" sm={12} lg={6}>\r\n                                                <div className=\"input-wrap\">\r\n                                                    <input name=\"drop\" className=\"modal-input\" type=\"number\" placeholder=\"Drop(cm)\" onKeyUp={this.handleInput}/>\r\n                                                    {/* only show if input is within limits*/}\r\n                                                    { (!this.state.invalid.drop && this.state.drop) &&\r\n                                                    <FontAwesomeIcon icon={faCheck} />\r\n                                                        }\r\n                                                </div>\r\n                                                    {/* only show if input is outside limits*/}    \r\n                                                    { (this.state.invalid.drop && (this.state.drop>0)) &&\r\n                                                            <p className=\"warning\">\r\n                                                                Limits: {this.props.limits.drop.min}cm - {this.props.limits.drop.max}cm\r\n                                                            </p>\r\n                                                        }\r\n                                                \r\n                                            </Col>       \r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col className=\"text-center\">\r\n                                                {/* only show total price & button if both inputs are correct*/} \r\n                                            { \r\n                                                (!this.state.invalid.width && !this.state.invalid.drop && this.state.width && this.state.drop) &&\r\n                                                <div> \r\n                                                    <p className=\"total-price font-weight-bold\"> £{this.state.totalPrice}</p>\r\n                                            \r\n                                                    <Button className=\"btn-total-price\" >Add to Basket</Button>\r\n                                                </div>   \r\n                                            }\r\n                                                </Col>   \r\n                                            </Row>\r\n                                        </Col>  \r\n                                        </Row>\r\n                                    </Container>    \r\n                            </Modal.Body>                       \r\n                        </Modal>\r\n                \r\n        </>\r\n        );\r\n  }\r\n}\r\nexport default CardModal;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAN2iiqoxGMig4O2gUpZSHwHXCNC_OQvRU\",\r\n    authDomain: \"blinds-direct.firebaseapp.com\",\r\n    databaseURL: \"https://blinds-direct.firebaseio.com\",\r\n    projectId: \"blinds-direct\",\r\n    storageBucket: \"blinds-direct.appspot.com\",\r\n    messagingSenderId: \"1062160351551\",\r\n    appId: \"1:1062160351551:web:b5236fdeda65664b7bd38a\",\r\n    measurementId: \"G-VGEQPQT45C\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n  export const storage = firebase.storage();\r\n\r\n\r\n  export default firebase;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CardModal from '../card-modal/card-modal.component';\r\nimport '../card/card.styles.css';\r\nimport {storage} from '../firebase/firebase.utils';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Card = ({name, limits, price_per_metre_squared, images, ...otherProps }) => {\r\n    {/* calculate minimum price and store in const*/} \r\n    const minimumPrice = (limits.width.min * limits.drop.min * price_per_metre_squared/10000).toFixed(2);\r\n\r\n    let [imageUrl, setImageUrl] = useState(0);\r\n    useEffect(() => {\r\n    let storageRefMain = storage.ref(`images/main/${images.texture_name}.jpg`)\r\n      storageRefMain.getDownloadURL().then(function(url){\r\n        imageUrl = url;\r\n        setImageUrl(imageUrl);\r\n      }, function(error){\r\n        console.log(error)\r\n      })\r\n    }, [imageUrl])\r\n\r\n\r\n    return(\r\n            <div className='card'>\r\n                <img alt={name} src={imageUrl} />\r\n                <p className=\"title font-weight-bold\">{name}</p>\r\n                <p className=\"minimum-price\">From £{minimumPrice}</p>              \r\n                <CardModal  name={name} limits={limits}images={images}price_per_metre_squared={price_per_metre_squared}{...otherProps}/>\r\n                \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from '../card/card.component'\r\n\r\nimport '../card-list/card-list.styles.css'\r\n\r\nconst CardList = props =>(\r\n        <div className=\"card-list\">\r\n            {props.blinds.map(({...otherprops}, index) => (\r\n                    <Card key={index}{...otherprops}/>         \r\n            ))}\r\n        </div>\r\n)\r\n\r\n\r\nexport default CardList;","import React from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport  logo from './images/logo.svg';\nimport {storage, firestore} from './components/firebase/firebase.utils';\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      blinds: [],\n      blindsSummary: ''\n    }\n  \n  }\n \ncomponentDidMount(){\n  // const myKey = '6HJx2R8st$%Q';\n  // const url = `https://www.interiorgoodsdirect.com/interview/api/products/?key=${myKey}`;\n  // const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n\n  // fetch(proxyUrl + url)\n  //        .then(response => response.json())\n  //        .then(obj => this.setState({blinds: obj.data.products, blindsSummary: obj.data.description}, () => console.log(this.state)))\n\n    firestore.collection('blindProducts')\n      .get()\n      .then( snapshot => {\n        const newBlinds = [];\n        snapshot.forEach(doc => {\n            const data = doc.data();\n            newBlinds.push(data)\n        })\n        this.setState({blinds: newBlinds}, () => console.log(this.state))\n      })\n      .catch( error => console.log(error))\n\n      firestore.collection('mainDescription').doc('bV1BRJ2BuKtCU85inlYf')\n      .get()\n      .then( snapshot => {\n        \n        this.setState({blindsSummary: snapshot.data().description})\n      })\n      .catch( error => console.log(error))\n\n      \n    }\n\n    \n\n\nrender(){\n  return(\n    \n    <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"Igd-logo\" alt=\"logo\" />\n          <p className=\"Igd-decription\">{this.state.blindsSummary}</p>\n        </header>\n        \n        <CardList blinds={this.state.blinds}/>\n    </div>\n  )\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}